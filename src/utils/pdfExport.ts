import jsPDF from 'jspdf';
import { FinancialData } from '../types/financial';

export const generatePDFReport = async (
  results: FinancialData, 
  mockData: Array<{ month: string; revenue: number; expenses: number }>
) => {
  const doc = new jsPDF();
  
  // Header
  doc.setFontSize(24);
  doc.setTextColor(59, 130, 246); // Blue color
  doc.text('CFO Helper - Financial Forecast Report', 20, 30);
  
  // Date
  doc.setFontSize(12);
  doc.setTextColor(100, 116, 139); // Slate gray
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 45);
  
  // Forecast Results Section
  doc.setFontSize(18);
  doc.setTextColor(15, 23, 42); // Dark slate
  doc.text('Forecast Results', 20, 65);
  
  doc.setFontSize(12);
  doc.setTextColor(71, 85, 105); // Slate
  
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'INR',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(value);
  };
  
  const formatRunway = (months: number) => {
    if (months === Infinity) return 'âˆž';
    return `${months} months`;
  };
  
  // Results data
  const resultItems = [
    ['Monthly Revenue:', formatCurrency(results.revenue)],
    ['Monthly Expenses:', formatCurrency(results.expenses)],
    ['Net Profit:', formatCurrency(results.netProfit)],
    ['Profit Margin:', `${results.profitMargin.toFixed(1)}%`],
    ['Cash Runway:', formatRunway(results.runway)]
  ];
  
  let yPosition = 85;
  resultItems.forEach(([label, value]) => {
    doc.text(label, 20, yPosition);
    doc.text(value, 120, yPosition);
    yPosition += 15;
  });
  
  // Historical Data Section
  doc.setFontSize(18);
  doc.setTextColor(15, 23, 42);
  doc.text('Historical Performance', 20, yPosition + 20);
  
  doc.setFontSize(12);
  doc.setTextColor(71, 85, 105);
  
  // Table header
  yPosition += 40;
  doc.text('Month', 20, yPosition);
  doc.text('Revenue', 70, yPosition);
  doc.text('Expenses', 120, yPosition);
  doc.text('Profit', 170, yPosition);
  
  // Table data
  mockData.forEach((row, index) => {
    const profit = row.revenue - row.expenses;
    yPosition += 15;
    doc.text(row.month, 20, yPosition);
    doc.text(formatCurrency(row.revenue), 70, yPosition);
    doc.text(formatCurrency(row.expenses), 120, yPosition);
    doc.text(formatCurrency(profit), 170, yPosition);
  });
  
  // Footer
  doc.setFontSize(10);
  doc.setTextColor(148, 163, 184); // Light slate
  doc.text('Generated by CFO Helper - Financial Forecasting Tool', 20, 280);
  
  // Save the PDF
  doc.save(`CFO-Helper-Report-${new Date().toISOString().split('T')[0]}.pdf`);
};